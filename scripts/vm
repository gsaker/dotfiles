#!/bin/bash

######################
#--------Info--------#
######################

#
# QEMU KVM launch script
#
# Tested hardware/software:
#	Dell XPS 13 9300 - i7-1065G7, 16GB DDR4, 1TB SSD
#	Razer Core X eGPU over Thunderbolt 3 with an EVGA NVIDIA GTX 1070
#	Arch Linux host / Kernel 5.12.5
#	Windows 10 Pro 20H2 64-bit guest
#
# Note: You must edit this script yourself for use on your own system
# 		as many values are hard-coded; see the globals section below
#
# Run with -h for usage
# Run with no arguments to start the VM
#
# Requirements:
#	bash
#	sudo
#	qemu-system-x86_64 (version >=6.0.0)
#	edk2-ovmf (edit path $ovmf)
#	virtio-net configured
#	A CPU with virtualisation and IOMMU enabled
#	A GPU attached to the vfio_pci driver (edit $vfio_id)
#	PulseAudio routed through a path exposed to the root user (edit $pa_server)
#	A boot disk - physical or image - with a valid EFI system partition (edit $bootdisk)
#
# Resources:
#	https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF
#	https://wiki.archlinux.org/title/QEMU
#

######################
#------Globals-------#
######################

vfio_id=""
pa_server=""
ovmf=""
efivars=""
bootdisk=""

smp=1
sockets=1
cores=1
threads=1
memory=1024

# [Optional] External disk to pass through if available
ext=""

######################
#--------------------#
######################

usagestring="QEMU KVM automation script for GNU/Linux
usage: $(basename $0) <options>
options:
  -i    Run without vfio or input passthrough"

# Alternative mouse detection
# mice=$(cat /proc/bus/input/devices | grep mouse | awk -F "=" '{print $2}' | awk -F " " '{print $1}')
# i=0
# for mouse in $mice; do
	# args=$args"-object input-linux,id=mouse$i,evdev=/dev/input/$mouse \
	# "
	# i=$((i+1))
# done

setbaseargs() {
	args=$args"--enable-kvm \
		-cpu host,kvm=off,-hypervisor,hv_time,hv_relaxed,hv_vendor_id=null,hv_vapic,hv_spinlocks=0x1fff \
		-smp $smp,sockets=$sockets,cores=$cores,threads=$threads \
		-machine q35 \
		-m $memory \
		-serial mon:stdio \
		-audiodev driver=pa,id=qemu0,server=$pa_server \
		-rtc clock=host,base=localtime \
		-device qemu-xhci,id=xhci \
		-device virtio-net \
		-device intel-hda \
		-device hda-output,audiodev=qemu0"
}

setgraphics() {
	args=$args" -nographic \
			-vga none \
			-device vfio-pci,host=$vfio_id"
}

setinputs() {
	i=0
	for dev in /dev/input/by-path/*-event-kbd; do
		args=$args" -object input-linux,id=kbd$i,evdev=$dev,grab_all=on,repeat=on"
		i=$((i+1))
	done
	
	i=0
	for dev in /dev/input/by-path/*-event-mouse; do
		args=$args" -object input-linux,id=mouse$i,evdev=$dev"
		i=$((i+1))
	done
}

setdrives() {
	if [[ ! -e $efivars ]]; then
		touch $efivars
	fi

	args=$args" -drive file=$ovmf,if=pflash,format=raw,unit=0,readonly=on \
		-drive if=pflash,format=raw,file=$efivars \
		-drive file=$bootdisk,index=0,media=disk,driver=raw"
		
	if [[ -e $ext ]]; then
		args=$args" -drive file=$ext,index=1,media=disk,driver=raw"
	fi
}

start() {
	sudo qemu-system-x86_64 $args
}

main() {
	args=""
	setbaseargs
	if [[ "$1" != "-i" ]]; then
		setgraphics
		setinputs
	fi
	setdrives

	echo "Starting QEMU with arguments: "$args
	start
}

showusage() {
	echo "$usagestring"
}

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	showusage
else
	main $1
fi
